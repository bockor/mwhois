#!/usr//bin/python
'''
connect to the NRA WHOIS DATA STORAGE over SSH tunnel / local port forwarding
prior querying the WHOIS server ensure the SSH tunnel is up by entering (or do equivalent in PuTTY for Window$ machines)
WHOIS server is listening on TCP 43
ssh -fN username@ip_whois_server -L4343:ip_whois_server:43
'''
#Consider https://realpython.com/python-sockets/
#Consider https://www.binarytides.com/receive-full-data-with-the-recv-socket-function-in-python/

import argparse
import sys
import socket

TARGET_HOST = "127.0.0.1"
TARGET_PORT = 4343
BUF_LENGTH = 4096
LF = '\r\n' # line feed

def parse_args():
    parser = argparse.ArgumentParser(description='nra-whois-client')
    parser.add_argument('get', type=str, help='provide domain name | ipv4 | ipv6')
    args = parser.parse_args()
    return args

def main():
    args = parse_args()
    resource = args.get + LF

    # create a socket object
    try:
        '''
        Address Family : AF_INET (IPv4)
        Type : SOCK_STREAM (TCP)
        ''' 
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    except socket.error, e:
        print "Error creating socket: %s" % e
        sys.exit(1) 

    # connect the client (3-way handshake)
    try:
        client.connect((TARGET_HOST,TARGET_PORT))
    except socket.gaierror, e:
         print "Address-related error connecting to server: %s" % e
         sys.exit(2)

    # send object
    try:
        client.sendall(resource)
    except socket.error, e:
        print "Error sending data: %s" % e
        sys.exit(3)

    # receive data
    buf = client.recv(BUF_LENGTH)
    print(buf)

    #close socket 
    client.close()

if __name__ == '__main__':
    main()
